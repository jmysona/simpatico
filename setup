#!/bin/bash

#------------------------------------------------------------------------
# Setup script:
#
# This script should be run once before the first time the program is
# compiled, to create files that are required by the build system but
# not contained in the repository. It should be invoked from the root 
# simpatico/ directory in which this script is located.
# 
# This script:
#
# 1) Copies default or repository versions of several build configuration 
# files, named config.mk_r, to modifiable user versions, named config.mk. 
# A separate set of build configuration files is created in the src/
# directory (for in-source build) and in the bld/serial and bld/parallel
# object directories. The makefile variables $(ROOT_DIR) and $(BLD_DIR)
# are defined in the main config.mk file each build directory (i.e., in 
# the src/, bld/serial and bld/parallel) are set to the absolute paths
# of the simpatico root directory and of the specific build directory.
#
# 2) Installs all required makefiles in the bld/serial and bld/parallel 
# directories, by copying corresponding makefiles from the src/ directory.
#
# 3) Installs copies of the config configuration script in the bld/serial
# and bld/parallel directories, by copying the file scr/config.
#
# 4) In the src/ file tree, the script installs user modifiable copies of 
# default versions of some C++ source files and makefile fragments that 
# users need to be able to edit to add new features. These files include:
#
#      - C++ source (*.cpp) files for factory classes
#      - C++ source files for some main programs
#      - the C++ header file that defines the Boundary typedef
#      - sources.mk source file lists in user/ subdirectories
#
# In each case, the name of the default repository version of the file
# ends in a suffix _r, while the user-modifiable file is a file with 
# the same name without the _r suffix that is created by copying the
# default version.
#
# 5) Install the makeDep dependency-maker script in the bin/ directory
#
# 6) Sets and exports the SIMPATICO_DIR shell environment variable
#
#========================================================================
# Set working directory to directory containing script, if not already.

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" > /dev/null && pwd )"
if [ "$SCRIPT_DIR" != "$PWD" ]; then
   echo "Resetting working directory to directory containing script:"
   unset CDPATH
   \cd $SCRIPT_DIR
fi

#========================================================================
# Set and export SIMPATICO_DIR

SIMPATICO_DIR=$PWD
export SIMPATICO_DIR

#=======================================================================
# Setup src/ source file directory tree


# Install main configuration file src/config.mk, by copying src/config.mk_r
sed -e "s|=PWD|=$PWD|" -e "s|=OWD|src|" src/config.mk_r > src/config.mk

# Note: Stream editor (sed) is used here to:
#   - Set $(ROOT_DIR) to absolute path of directory from which script invoked
#   - Set $(BLD_DIR) to absolute path to src/ directory (in-source-build)

# Setup src/util/ directory

# Namespace config.mk in src/ directory (for in-source builds)
cp ./src/util/config.mk_r src/util/config.mk

# Copy typedef for the class that defines boundary conditions
cp src/simp/boundary/Boundary.h_r src/simp/boundary/Boundary.h

(cd ./src/simp; ./setup)
(cd ./src/mcMd; ./setup)
(cd ./src/ddMd; ./setup)
(cd ./src/tools; ./setup)

# Comment out UTIL_BOUND definition in util/config.mk
UTIL_CONFIG=src/util/config.mk
if [ `grep "^ *UTIL_BOUND *= *1" "$UTIL_CONFIG"` ]; then
   sed "s/UTIL_BOUND *=.*$/UTIL_BOUND=1/" "$UTIL_CONFIG" > temp
   sed "s/^ *UTIL_BOUND=/#UTIL_BOUND=/" temp > "$UTIL_CONFIG"
   rm temp
fi

#========================================================================
# Setup bld/serial directory tree (out-of-source builds with MPI disabled)

# Copy and edit config file in bld/serial
# Set $(ROOT_DIR) to absolute path of directory from which script is invoked
# Set $(BLD_DIR) to absolute path to bld/serial directory
sed -e "s|=PWD|=$PWD|" -e "s|=OWD|bld/serial|" src/config.mk_r > bld/serial/config.mk

# Namespace level config.mk files 
cp src/util/config.mk_r bld/serial/util/config.mk
cp src/simp/config.mk_r bld/serial/simp/config.mk
cp src/mcMd/config.mk_r bld/serial/mcMd/config.mk
cp src/ddMd/config.mk_r bld/serial/ddMd/config.mk
cp src/tools/config.mk_r bld/serial/tools/config.mk

# Comment out UTIL_BOUND definition in util/config.mk
UTIL_CONFIG=bld/serial/util/config.mk
if [ `grep "^ *UTIL_BOUND *= *1" "$UTIL_CONFIG"` ]; then
   sed "s/UTIL_BOUND *=.*$/UTIL_BOUND=1/" "$UTIL_CONFIG" > temp
   sed "s/^ *UTIL_BOUND=/#UTIL_BOUND=/" temp > "$UTIL_CONFIG"
   rm temp
fi

# Makefiles
cp src/makefile bld/serial/makefile
cp src/util/makefile bld/serial/util/makefile
cp src/simp/makefile bld/serial/simp/makefile
cp src/mcMd/makefile bld/serial/mcMd/makefile
cp src/tools/makefile bld/serial/tools/makefile
cp src/ddMd/makefile bld/serial/ddMd/makefile
cp src/util/tests/makefile bld/serial/util/tests/makefile
cp src/simp/tests/makefile bld/serial/simp/tests/makefile
cp src/mcMd/tests/makefile bld/serial/mcMd/tests/makefile
cp src/tools/tests/makefile bld/serial/tools/tests/makefile
cp src/ddMd/tests/makefile bld/serial/ddMd/tests/makefile

# Configure script
cp src/configure bld/serial/configure

#========================================================================
# Setup bld/parallel (out-of-source builds with MPI enabled)

# Copy and edit config file in bld/parallel
# Set $(ROOT_DIR) to absolute path of directory from which script is invoked
# Set $(BLD_DIR) to absolute path to bld/parallel directory
sed -e "s|=PWD|=$PWD|" -e "s|=OWD|bld/parallel|" src/config.mk_r > bld/parallel/config.mk

# Namespace level config.mk files
cp src/util/config.mk_r bld/parallel/util/config.mk
cp src/simp/config.mk_r bld/parallel/simp/config.mk
cp src/mcMd/config.mk_r bld/parallel/mcMd/config.mk
cp src/tools/config.mk_r bld/parallel/tools/config.mk
cp src/ddMd/config.mk_r bld/parallel/ddMd/config.mk

# Comment out UTIL_BOUND definition in util/config.mk
UTIL_CONFIG=bld/parallel/util/config.mk
if [ `grep "^ *UTIL_BOUND *= *1" "$UTIL_CONFIG"` ]; then
   sed "s/UTIL_BOUND *=.*$/UTIL_BOUND=1/" "$UTIL_CONFIG" > temp
   sed "s/^ *UTIL_BOUND=/#UTIL_BOUND=/" temp > "$UTIL_CONFIG"
   rm temp
fi

# Makefiles 
cp src/makefile bld/parallel/makefile
cp src/util/makefile bld/parallel/util/makefile
cp src/simp/makefile bld/parallel/simp/makefile
cp src/mcMd/makefile bld/parallel/mcMd/makefile
cp src/ddMd/makefile bld/parallel/ddMd/makefile
cp src/tools/makefile bld/parallel/tools/makefile

# Makefiles in test directories
cp src/util/tests/makefile bld/parallel/util/tests/makefile
cp src/simp/tests/makefile bld/parallel/simp/tests/makefile
cp src/mcMd/tests/makefile bld/parallel/mcMd/tests/makefile
cp src/tools/tests/makefile bld/parallel/tools/tests/makefile
cp src/ddMd/tests/makefile bld/parallel/ddMd/tests/makefile

# Configure script
cp src/configure bld/parallel/configure

# Enable UTIL_MPI by default in bld/parallel (silently).
# (Run in subprocess to avoid permanentaly changing directory)
(cd ./bld/parallel; ./configure -m1 &> /dev/null)

#========================================================================
# Install scripts

# Install a copy of the makeDep dependency-maker script in bin/
(cp scripts/python/makeDep bin/makeDep)

#========================================================================
