/*
* Simpatico - Simulation Package for Polymeric and Molecular Liquids
*
* Copyright 2010 - 2017, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include <mcMd/potentials/external/ExternalFactory.h>

#include <mcMd/simulation/System.h>

// ExternalPotential interfaces and implementation classes
#include <mcMd/potentials/external/ExternalPotential.h>
#include <mcMd/potentials/external/ExternalPotentialImpl.h>

// Interaction classes
#include <simp/interaction/external/BoxExternal.h>
#include <simp/interaction/external/OrthoBoxExternal.h>
#include <simp/interaction/external/OrthoBoxExternal.h>
#include <simp/interaction/external/SlitExternal.h>
#include <simp/interaction/external/LamellarOrderingExternal.h>
#include <simp/interaction/external/SimplePeriodicExternal.h>
#include <simp/interaction/external/PeriodicExternal.h>
#include <simp/interaction/external/GeneralPeriodicExternal.h>
#include <simp/interaction/external/NucleationExternal.h>
#include <simp/interaction/external/SphericalTabulatedExternal.h>

namespace McMd
{

   using namespace Simp;

   /**
   * Default constructor.
   */
   ExternalFactory::ExternalFactory(System& system)
    : systemPtr_(&system)
   {}

   /*
   * Return a pointer to a new ExternalPotential, if possible.
   */
   ExternalPotential* ExternalFactory::factory(const std::string& name) const
   {
      ExternalPotential* ptr = 0;

      ptr = trySubfactories(name);
      if (ptr) return ptr;

      if (name == "BoxExternal") {
         ptr = new ExternalPotentialImpl<BoxExternal>(*systemPtr_);
      } else
      if (name == "OrthoBoxExternal") {
         ptr = new ExternalPotentialImpl<OrthoBoxExternal>(*systemPtr_);
      } else
      if (name == "SlitExternal") {
         ptr = new ExternalPotentialImpl<SlitExternal>(*systemPtr_);
      } else
      if (name == "LamellarOrderingExternal") {
         ptr = new ExternalPotentialImpl<LamellarOrderingExternal>(*systemPtr_);
      } else
      if (name == "SimplePeriodicExternal") {
         ptr = new ExternalPotentialImpl<SimplePeriodicExternal>(*systemPtr_);
      } else
      if (name == "PeriodicExternal") {
         ptr = new ExternalPotentialImpl<PeriodicExternal>(*systemPtr_);
      } else
      if (name == "GeneralPeriodicExternal") {
         ptr = new ExternalPotentialImpl<GeneralPeriodicExternal>(*systemPtr_);
      } else
      if (name == "NucleationExternal") {
         ptr = new ExternalPotentialImpl<NucleationExternal>(*systemPtr_);
      }
      return ptr;
   }

}
