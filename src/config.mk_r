#-----------------------------------------------------------------------
# file: $(BLD_DIR)/config.mk
#
# A copy of this makefile fragment is included by all other makefiles. 
# The copy of this file named config.mk_r in the src/ directory is a
# default version that is kept under repository control (the suffix _r 
# denotes "repository"), but is not used by the makefile system. The 
# makefile system uses copies of this file named config.mk in the src/, 
# bld/parallel, and bld/serial directories, which will be referred to 
# as user copies. Initial versions of these three user copies are 
# created by the setup setup script by copying the repository version
# src/config.mk_r and modifying a few lines to set paths correctly for 
# each location.  The contents of each user copy effect only libraries 
# and programs that are compiled in the directory tree rooted at the 
# directory containing the config.mk file.
#
# Users may edit any of the user copies of this file to configure 
# the build process, either manually or by using the configure script 
# in the same directory as the relevant config.mk file. Users should,
# however, normally avoid modifying the repository file src/config.mk_r.
#-----------------------------------------------------------------------
# Summary of contents:
#
# This file contains definitions of makefile variables that specify:
# 
#  - Absolute paths for the simpatico directory and some subdirectories
#  - A variable UTIL_MPI that, if defined, enables MPI
#  - A variable UTIL_DEBUG that, if defined, enables debugging checks
#  - A variable UTIL_CXX11 that, if defined, enables use of C++11
#  - Identifiers for the choice of compiler and os/package manager
#  - Compiler options and flags for specific compilers (gcc & intel)
#  - A variable MAKEDEP that enables automatic dependency generation
#
# After setup, some common changes to this file may be made by invoking 
# configure script from the directory that contains the config.mk file 
# with appropriate options.  Specifically, this script may be used to 
# enable (option -m1) or disable (-m0) MPI, to enable (-g1) or disable
# (-g1) debugging, to enable (-k1) or disable (-k0) automatic dependency 
# generation, to choose the compiler identifier string (the -j option), 
# or to choose the operating system / package manager identifier 
# (the -o option). For example, the command:
#
# ./configure -m1 -j gcc
#
# would enable MPI and select the gcc compiler prior to compilation.
#-----------------------------------------------------------------------
# Absolute directory paths
#
# The setup script should set the value of ROOT_DIR in config.mk to 
# the absolute path to the root simpatico/ directory, and BLD_DIR 
# should be set to the path to the directory that contains this 
# config.mk file. The value of BLD_DIR is the root of the directory 
# in which object *.o files will be placed during compilation. 
#
# In the repository file config.mk_r, the absolute path for ROOT_DIR 
# and the relative path to BLD_DIR are assigned placeholder values of 
# "PWD" and "OWD", respectively. These placeholders are replaced by 
# actual # paths by the setup script when it creates user copies of 
# the config.mk file in the src/, bld/parallel and bld/serial 
# directories.
# 
# BLD_DIR = path to the object directory that will contain *.o files
# SRC_DIR = path to the src/ directory, which contains source files
# BIN_DIR = path to the directory in which executables are installed
#
# For the config.mk file in the src/ directory, BLD_DIR and SRC_DIR
# will be the same, and will both point to the src/ directory. This
# copy of config.mk is used for in-source builds.

ROOT_DIR=PWD
BLD_DIR=$(ROOT_DIR)/=OWD
SRC_DIR=$(ROOT_DIR)/src
BIN_DIR=$(ROOT_DIR)/bin

#-----------------------------------------------------------------------
# Flags that control compile time options:

# Defining UTIL_MPI enables linking to an MPI library. MPI must be
# enabled by uncommenting this line to build a parallel program.
#UTIL_MPI=1

# Defining UTIL_DEBUG enables a variety of extra sanity checks, at some
# cost in speed. Debugging is disabled (commented out) by default.
#UTIL_DEBUG=1

# Defining UTIL_CXX11 enables the use of features of the C++11 standard.
# C+11 is disabled (commented out) by default. If C++11 is disabled, 
# the code uses only syntax and features defined in the older C++ 1998 
# standard.
#UTIL_CXX11=1

#-----------------------------------------------------------------------
# Compiler and Operating System Identifier Strings:
#
# Users may select a compiler and a MPI library implementation by 
# setting values for the following two identifer strings:
#
# COMPILER - identifier for the compiler (e.g., gcc or intel)
# OS       - identifier for operating system / package manager 
#
# The default version of this file recognizes the following values:
#
# COMPILER : gcc (default), intel
# OS       : generic (default), mac-port
#
# Each valid combination of these strings selects a block of definitions 
# for variables that define the name of the compiler and the strings of 
# options that should be passed to the compiler and linker. 
#
# The value OS=generic works for most generic unix-like systems in which 
# all include files and libraries are placed in standard locations, for
# which no explicit paths need to be added to the compiler search paths 
# for header files or libraries. This can be used both for standard linux 
# distributions and the Mac OS X # operating system if MPI library was 
# installed either by compiling from source and installing in standard
# locations or by using the Homebrew package manager.
#
# The value OS=mac-port should be used to compile on Mac OSX using an
# open-mpi MPI library installed by the MacPort system. The MacPort 
# manager places header and library files in non-standard locations 
# within the /opt/local directory tree.

COMPILER=gcc
OS=generic

# ------------------------------------------------------------------------
# The following variables are used directly in makefile pattern rules.
#
# CXX         - C++ compiler executable name (must be in the users PATH)
# CXXFLAGS    - flags used to compile source files, without linking
# INCLUDES    - Directories to search for included header files
# CXXSTD      - flag to define C++ language standard (c++98 or c++11)
# TESTFLAGS   - flags used to compile unit test programs
# LDFLAGS     - flags used to compile and link a main program
# AR          - path to archiver executable, to create library (*.a) files
# ARFLAGS     - flags used by archiver
# MPIRUN      - command to run mpi, including -np option, e.g. "mpirun -np"
#
# Pattern rules for compiling source files in the util/, simp/, mcMd/ and 
# ddMd/ directories are defined in the patterns.mk files in each of these 
# namespace-level directories. In each of these, the basic pattern is
#
# %.o:%.cpp
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $(DEFINES) -c -o $@ $<
#
# The variable $(DEFINES), which contains a list of C preprocessor
# macro definitions, is not defined in this file. Instead, it is assigned 
# a different value in each namespace level patterns.mk file. The 
# value of $(DEFINES) for each namespace contains a string of compiler
# options that use the compiler "-D" option to define the preprocessor 
# macro definitions used in that namespace.
# ------------------------------------------------------------------------
# Definitions for specific combinations of COMPILER and OS:

# Global default values (modified for particular compilers below)
INCLUDES= -I$(SRC_DIR)
ifdef UTIL_CXX11
   CXX_STD = --std=c++11
else
   CXX_STD = --std=c++98
endif
LDFLAGS=
ARFLAGS=rcs
MPIRUN=mpirun -np

#-- Gnu GCC compiler ------
ifeq ($(COMPILER),gcc)
   TESTFLAGS= -Wall $(CXX_STD)
   CXXFLAGS= -Wall $(CXX_STD)
   ifndef UTIL_DEBUG
      CXXFLAGS+= -O3 -ffast-math -Winline
   endif
   AR=ar
   ifneq ($(UTIL_MPI),1)
      CXX=g++
   else
      CXX=mpicxx
   endif
endif

# -- Intel ICC compiler ---
ifeq ($(COMPILER),intel)
   TESTFLAGS= -ansi $(CXX_STD)
   CXXFLAGS= -ansi $(CXX_STD)
   AR=xiar
   ifneq ($(UTIL_MPI),1)
      # Serial intel icpc compiler (no mpi)
      CXX=icpc
      ifndef UTIL_DEBUG
         CXXFLAGS=+ -fast 
      endif
   else
      CXX=mpicxx
   endif
endif

# ---- Explicit Paths for MPI Library ----
ifeq ($(UTIL_MPI),1)
   ifeq ($(OS),mac-port)
      INCLUDES+= -I/opt/local/include/openmpi-mp
      LDFLAGS+= -L/opt/local/lib/openmpi-mp -lmpi_cxx -lmpi
   endif
endif

#-----------------------------------------------------------------------
# Automatic dependency generation (comment out to disable)
#
# Automatic dependency is enabled by default and should normally be 
# left enabled. Automatic dependency generation allows the build system
# to correctly decide what needs to be recompiled if you modify any 
# compile time option, config.mk file or source file after compiling 
# once and before recompiling. You should consider disabling it only 
# if you are having trouble with the system for generating dependency 
# files (e.g., because of trouble with the python module it requires) 
# and cannot figure out how to get it to work. If automatic dependency 
# generation is disabled, you should invoke "make clean" from the 
# object directory (the directory containing the relevant user copy 
# of this file) before re-compiling after using the configure script
# to change compile time options or manually modifying any config.mk 
# or C++ source file, in order to force a clean rebuild.
 
MAKEDEP=$(ROOT_DIR)/bin/makeDep
