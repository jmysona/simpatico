/*
* Simpatico - Simulation Package for Polymeric and Molecular Liquids
*
* Copyright 2010 - 2017, The Regents of the University of Minnesota
* Distributed under the terms of the GNU General Public License.
*/

#include <ddMd/potentials/external/ExternalFactory.h>
#include <ddMd/simulation/Simulation.h>

// ExternalPotential interface and implementation classes
#include <ddMd/potentials/external/ExternalPotential.h>
#include <ddMd/potentials/external/ExternalPotentialImpl.h>

// External interaction classes
#include <simp/interaction/external/BoxExternal.h>
#include <simp/interaction/external/OrthoBoxExternal.h>
#include <simp/interaction/external/OrthoBoxExternal.h>
#include <simp/interaction/external/SlitExternal.h>
#include <simp/interaction/external/LamellarOrderingExternal.h>
#include <simp/interaction/external/SimplePeriodicExternal.h>
#include <simp/interaction/external/PeriodicExternal.h>
#include <simp/interaction/external/GeneralPeriodicExternal.h>
#include <simp/interaction/external/NucleationExternal.h>

namespace DdMd
{

   using namespace Simp;

   /**
   * Default constructor.
   */
   ExternalFactory::ExternalFactory(Simulation& simulation)
    : Factory<ExternalPotential>(),
      simulationPtr_(&simulation)
   {}

   /*
   * Return a pointer to a new ExternalPotential, if possible.
   */
   ExternalPotential* 
   ExternalFactory::factory(const std::string& name) const
   {
      ExternalPotential* ptr = 0;

      // Try subfactories first.
      ptr = trySubfactories(name);
      if (ptr) return ptr;

      if (name == "BoxExternal") {
         ptr = new ExternalPotentialImpl<BoxExternal>(*simulationPtr_);
      } else
      if (name == "OrthoBoxExternal") {
         ptr = new ExternalPotentialImpl<OrthoBoxExternal>(*simulationPtr_);
      } else
      if (name == "SlitExternal") {
         ptr = new ExternalPotentialImpl<SlitExternal>(*simulationPtr_);
      } else
      if (name == "LamellarOrderingExternal") {
         ptr = new ExternalPotentialImpl<LamellarOrderingExternal>(*simulationPtr_);
      } else
      if (name == "SimplePeriodicExternal") {
         ptr = new ExternalPotentialImpl<SimplePeriodicExternal>(*simulationPtr_);
      } else
      if (name == "PeriodicExternal") {
         ptr = new ExternalPotentialImpl<PeriodicExternal>(*simulationPtr_);
      } else
      if (name == "GeneralPeriodicExternal") {
         ptr = new ExternalPotentialImpl<GeneralPeriodicExternal>(*simulationPtr_);
      } else
      if (name == "NucleationExternal") {
         ptr = new ExternalPotentialImpl<NucleationExternal>(*simulationPtr_);
      }
      return ptr;
   }

}
