/*! \page user_compile_page 2.2 Compiling 

\ref user_source_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_usage_page (Next) 
<BR>


<h2> Contents:</h2>
   <ul style="list-style: none;">
   <li> \subpage user_compile_overview_page "2.4.1 Overview" </li>
   <li> \subpage user_compile_setup_page    "2.4.2 Initial Setup" </li>
   <li> \subpage user_compile_configure_page "2.4.3 Configuration" </li>
   <li> \subpage user_compile_mpi_page      "2.4.4 Configuring MPI" </li>
   <li> \subpage user_compile_compile_page  "2.4.5 Program Compilation"</li>
   </ul>

\section compile_short_section Short Instructions

Here is a brief summary of instructions for compiling all of the simpatico 
programs:

   - Add paths to environment variables: Add the path simpatico/bin to the 
     users PATH environment variable, and add simpatico/scripts/python to 
     the PYTHONPATH variable (as discussed \ref compile_environment_section 
     "here").

   - Change directory (cd) to the simpatico root directory.

   - From the simpatico root directory, run the setup script, by invoking
     \code 
     > ./setup
     \endcode

   - Use the configure script in the simpatico/ directory to enable any 
     optional compile-time features that are not enabled by default (as 
     discussed \ref compile_configure_section "here").

   - Compile and install the single-processor mcSim and mdSim MC and MD 
     programs, by invoking
     \code
     > make mcMd
     \endcode
     from the simpatico root directory. This will install executables named
     "mdSim" and "mcSim" in the simpatico/bin directory.

   - Compile and install the "mdPp" MD post-processing analysis program, 
     by invoking
     \code
     > make tools
     \endcode
     from the simpatico root directory. This will install the ppMd 
     executable in the simpatico/bin directory.

   - Set up your environment to allow compilation of MPI programs (as 
     discussed \ref compile_mpi_section "here"), if not already done.

   - Compile and install the multi-processor versions of "mcSim" and 
     "mdSim", which allow embarassingly parallel simulations of 
     different systems on different processors, by invoking
     \code
     > make mcMd-mpi
     \endcode
     from the simpatico/ directory. If compilation succeeds (i.e., if 
     MPI is configured correctly), this will install executables named 
     "mcSim_m" and "mdSim_m" in the simpatico/bin directory. 

   - Compile and install the ddSim parallel domain decomposition MD 
     program, by invoking
     \code
     > make ddMd
     \endcode
     from the simpatico/ directory. This will install the "ddSim" 
     executable in the simpatico/bin directory.

Note that all commands should be issued from the simpatico/ root directory. Each of the above steps is discussed in more detail below. 

\section compile_environment_section Setting environment variables

Before compiling any code, you should:

  - Add simpatico/bin to the PATH shell environment variable (the shell command search path)

  - Add simpatico/scripts/python to the PYTHONPATH environment variable (the python module search path)

To do this, if you are using a bash shell, you must add some variant of the following lines to your the .profile or .bash_profile file in your user home directory:
\code
SIMPATICO_DIR=${HOME}/simpatico
export PATH=${PATH}:/${SIMPATICO_DIR}/bin
export PYTHONPATH=${PYTHONPATH}:/${SIMPATICO_DIR}/scripts/python
\endcode
The value of SIMPATICO_DIR should be set to the path to the simpatico root directory. In the above example, this is assumed to be a subdirectory of the users home directory. After adding an appropriate variant of these lines to .profile or .bash_profile, log out, log back in, and then enter "echo $PATH" and "echo $PYTHONPATH" to make sure that these variables have been set correctly. 

Explanation: The simpatico/bin directory is the default location for installing executable files created by the build system. This must be added to the users PATH to allow the operating system to find the executable files needed to run a simulation. The simpatico/scripts/python directory contains a python script that is used by the build system to generate information about dependencies among C++ files, as discussed in more detail \ref compile_dependency_section "below".

\section compile_setup_section Initial setup

Before compiling any code, you must run a bash script named "setup". This script is located in the simpatico/ root directory, and must be executed from this directory. After setting your working directory to the simpatico/ root directory, enter:
\code
> ./setup
\endcode
Explanation: The setup script creates several configuration files that are required for compilation. These are all files that users may need to modify in order to customize or extend the program, and that are thus not stored in the git repository. The script works by making copies of default file versions that are stored in the repository under slightly different file names. The setup script should only need to be invoked once, before the first time you compile.

\section compile_inoutsource_section Building "out-of-source" vs. "in-source"

The simpatico makefile system can build the package either "out-of-source" or "in-source". When the package is built "in-source", object files, static library files and other non-executable files that are generated during compilation are placed in the src/ directory tree, alongside the corresponding C++ source files. When it is built "out-of-source", these generated files are placed in a separate "build" directory tree, outside the source tree. In either case, the executable files for all programs are installed in the simpatico/bin directory. We recommend that most users build the package out of source. 

To perform a standard out-of-source build of any simpatico program, simply invoke "make" with an appropriate target ("mcMd", "ddMd" or "mcMd-mpi") from the simpatico/ root directory, as described in the above short instructions. The main makefile in the root directory will automatically build out-of-source, and uses different build directories for serial (single-processor) and parallel (mpi-enabled) programs. Specifically, the serial mcSim and mdSim programs are built in the simpatico/bld/serial/ directory, whereas the ddSim parallel MD program and multi-processor versions of mcSim and mdSim are built in the simpatico/bld/parallel directory.

To peform an in-source build of any program, one must instead invoke "make" with an appropriate target from the simpatico/src/ directory, rather than from the simpatico/ root directory. The same commands are used as those used to build out-of-source from the root directory: Invoking "make mcMd" from the src/ directory performs an in-source build of mcSim and mdSim. Invoking "make ddMd" from src/ builds ddSim. Invoking "make mcMd-mpi" builds multi-processor versions of mcSim and mdSim. In addition, invoking the command "make all" from almost any subdirectory of the src/ directory tree will also compile all C++ files in the tree rooted at that directory. Developers often find it convenient to compile in-source when working on new code. 
 
Hereafter, unless stated otherwise, we will assume that all programs are built out-of-source by invoking make from the simpatico/ root directory.

\section compile_build_directories_section Build configuration files

The directories bld/serial, bld/parallel and src/ each contain the directory structure and the set of makefiles required to build any version of simpatico. In what follows, we will refer to these three directories collectively as build directories. Each of these build directories contains a tree of subdirectories identical to that of the src/ directory. After setup (i.e., after the setup script has been run), each build directory tree also contains several makefiles and a set of build configuration files. 

The build configuration files are all named "config.mk". The main build configuration file is the file named config.mk in the root directory of the build directory tree (i.e., in bld/serial, bld/parallel, or src/). In addition, the util/, simp/, mcMd/ and ddMd/, and tools/ subdirectories of each build directory also each contain a configuration file named config.mk. The six config.mk files in each build directory together specify the configuration of any code compiled in that directory. Specifically, they specify which compiler will be used, what command line options will be passed to the compiler, and which optional features will be enabled or disabled in any code compiled in that directory. These files are makefile fragments that are included by the actual makefiles. Users may change the configuration before compiling either by: (1) manually editing these configuration files, or (2) by using a script named "configure" to enable or disable specific features. We recommend using the configure script (discussed in more detail \ref compile_configure_section "below") to change configuration whenever possible, but some changes require manual editing.

The src/ directory also contains a corresponding set of 6 files named config.mk_r. Each of these is a default version of a corresponding config.mk file. Only the config.mk_r files are stored in the git repository (the suffix _r stands for "repository"). Initial versions of the config.mk files are created in all build directories by the setup script by copying the config.mk_r files. Users may modify the config.mk files as needed, but should avoid modifying the config.mk_r default versions.

\section compile_compiler_section Choosing a compiler

The choice of what compiler command to use, and what options to pass the compiler, are specified in the main config.mk file in each build directory. By default, the build system uses the gnu compiler collection (gcc) C++ compiler, using a reasonable set of default compiler options, with aggressive optimization. If you are satisifed with the gcc compiler and these compiler options, you can skip the rest of this section.

If you prefer to use the intel compiler (and if it is installed on your computer), enter the command
\code
> ./configure -j intel
\endcode
from the simpatico root/ directory and/or the simpatico/src directory. Entering this command from the simpatico/ directory selects the intel compiler for use in all out-of-source builds, in both the bld/serial and bld/parallel directories. Entering this command from the simpatico/src directory selects the intel compiler for use in in-source builds. To explicitly choose the gcc compiler (e.g., after choosing the intel compiler and then changing your mind), instead enter "./configure -j gcc".

Details: 

The choice of compiler for use in each build directory is specified by the value of a makefile variable named COMPILER that is defined the main config.mk configuration file in that directory. Thus far, the only valid values for this identifier are "gcc" or "intel". The default value, COMPILER=gcc, selects the gnu C++ compiler, for which the compiler command name is "g++". Setting COMPILER=intel selects the intel C++ compiler, for which the compiler command is "icpc".  

The value of the COMPILER variable is used to select definitions of other variables in the main config.mk file that define the command line options that will be passed to the compiler. To change the options passed to a particular compiler, one must manually edit the main config.mk file in the build directory. Users who wish to do this should read the documentation in config.mk file, which explains the purpose of each of the relevant makefile variables. Experienced users should find it straightforward to extend this file as needed to allow use of other compilers or modify compiler options.

\section compile_mcMd_section Compiling mcSim and mdSim

As a first step, try compiling the single-processor versions of the mcSim and mdSim programs. Because these programs are standard C++ with no external dependencies, they usually compile with no difficulties. After running the setup script (see above), and choosing a compiler (or accepting the default choice), simply cd to the simpatico/ root directory and then enter:
\code
> make mcMd
\endcode
This will compile a large number of *.cpp files from the simpatico/src/ directory, placing corresponding object (*.o) and dependency (*.d) files in the simpatico/bld/serial directory, and then install executable files named mcSim and mdSim in the simpatico/bin directory. 

\section compile_mdPp_section Compiling the mdPp post-processor

The mdPp post-processor program is another a simple single-processor program that you can compile before attempting to compile any parallel programs. To do so, cd to the simpatico/ root directory and enter:
\code
> make tools
\endcode
This will place *.o and *.d files in the simpatico/bld/serial/tools directory and install an executable named mdPp in the simpatico/bin directory.

\section compile_util_mpi_section Enabling use of MPI in Simpatico

The ddSim program and the multi-processor versions of mcSim and mdSim require an MPI library for interprocessor communication. Users must thus confirm that an MPI library is installed on the machine they are using, or install an MPI library, before attempting to compile any of these parallel programs. 

Before compiling any code that uses MPI in a particular build directory, MPI must be enabled in the build system used in that directory.  The use of MPI in a particular build directory is enabled if the main config.mk file in that directory contains a line that defines "UTIL_MPI=1", and is disabled if this line is commented out. 

When simpatico is built by invoking make from the simpatico/ root directory (as we recommend), programs that require MPI will be built in the bld/parallel directory, and MPI will automatically enabled in that directory. Conversely, MPI is automatically disabled in the bld/serial directory that is used to build serial code. For standard out-of-source builds, there is thus no need for users to explicitly enable or disable MPI in different build directories. (It just works).

When simpatico is built in the src/ directory by invoking make from within that directory, however, users are responsible for enabling MPI before compiling parallel programs (ddSim and parallel versions of mcSim and mdSim), and disabling MPI before compiling serial programs (serial versions of mcSim and mdSim, or the mdPp postprocessor).  The simplest way to enable or disable MPI is to invoke the configure script with the "-m" option, by entering 
\code
 > ./configure -m0
\endcode
from the src/ directory to enable MPI for code built in src/, or 
\code
 > ./configure -m1
\endcode 
from within the src/ directory to disable MPI. The configure script is discussed in more detail below. 

The default version of the main config.mk file in a build directory uses the "mpicxx" wrapper to invoke the compiler when compiling when MPI enabled (i.e., when UTIL_MPI is defined). The command "mpicxx" is a standard name for an executable file, which is provided by the most common MPI libraries (e.g., openmpi and mpich), that is used to compile and link C++ MPI programs. The mpicxx script works by invoking the compiler while passing the compiler the locations for any mpi include files or libraries that are needed on a particular system. The use of this wrapper avoids or minimizes the need for the user to pass explicit paths for these files, which can be installed in different places on different systems, depending on how the MPI library was installed. This use of the "mpicxx" script is enabled by setting CXX=mpicxx in the main config.mk file if UTIL_MPI is defined, thus replacing the name of compiler command (e.g., gcc) by the name "mpicxx". 

\section compile_mpi_section Accessing or Installing an MPI Library

The simpatico programs that require MPI have been built and tested on several linux systems, include multi-user clusters and deskop computers, and on MacIntosh laptop and desktop computers.  It is often useful to be able to compile the simpatico parallel programs on desktop or laptop, primarily for purposes of development and testing. Here are a few comments about how to enable or (if necessary) install MPI on different systems before attempting to compile the simpatico programs that require MPI.

\subsection compile_mpi_cluster Multi-User Linux Clusters

If you are attempting to use simpatico on a well-maintained multi-user linux cluster that is used for computational research, MPI is almost certainly already installed. At the University of Minnesota, simpatico is often run on several clusters of the Minnesota Supercomputer Institute (MSI). The clusters at MSI, like many others, use a linux "module" system that requires users to load modules that provide access to software they wish to use. In this sort of environment, you often need to load an appropriate module or modules to enable usage of a particular compiler and/or a particular MPI library. Site-specific documentation of the available modules is needed. 

\subsection compile_mpi_Ubuntu Ubuntu Linux

To install the OpenMPI MPI library on Ubuntu linux using the apt-get package manager, enter\code
> sudo apt-get --yes install openmpi-bin
> sudo apt-get --yes install libopenmpi-dev
> sudo apt-get --yes install libopenmpi1.6
\endcode
This should installs MPI-specific files in standard locations, for which the default configuration settings for simpatico are sufficient.

\subsection compile_mpi_MacBrew Mac OS X / Homebrew

To install the OpenMpi library on a MacIntosh by using the Homebrew package 
manager, enter
\code
 > brew install openmpi
\endcode
After installing OpenMPI by this route, we have had no trouble compiling 
simpatico programs that use MPI using the gcc compiler and default 
configuration settings (COMPILER=gcc, OS=generic).

\subsection compile_mpi_MacPort Mac OS X / MacPort

To install OpenMpi on a Mac OS X system on which the MacPorts system is 
being used to manage linux packages, simply enter
\code
> sudo port install openmpi
\endcode
We have successfully installed openmpi on a iMac desktop by this method, 
but then encountered unexpected trouble when attempting to compile simpatico 
files that use MPI. On that system, mpicxx was unable to find the required 
MPI header and library files without additional information. A work-around 
was developed for this by adding code to the main config.mk file that 
explicitly passes the required paths for MPI header and library files to
the compiler if the makefile variable OS is set to the value "mac-port".
To enable this work-around, set OS=mac-port in the main config.mk file
either by invoking the command 
\code
">./configure -o mac-port" 
\endcode
from the simpatico/ root directory or a specific build directory, or by
manually the main config.mk configuration file in the relevant build
directory. It remains unclear to us (the simpatico developers) why this 
workaround was necessary, since it seems to us that a properly configured 
mpicxx script should have automatically invoked the compiler with options 
that added these paths to the search paths.

\section compile_ddMd_section Compiling ddSim

To compile the ddSim parallel MD program, after choosing a compiler and 
checking paths to the MPI files (as discussed above), simply enter 
\code
> make ddMd
\endcode
from the simpatico/ root directory.  If successful, this will build the 
program in the simpatico/bld/parallel directory tree and install an 
executable named ddSim in the simpatico/bin directory. 

\section compile_multi_section Compiling mcSim and mdSim (multi-processor versions)

Multi-processor versions of mcSim and mdSim can be used to run:

  - Multiple independent single-processor simulations as an MPI job, with 
    completely separate input and output files

  - Multiple simulations with a sequence of parameter values specified in 
    a single parameter file, using the perturbation feature.

  - Replica exchange simulations

To compile multi-processor versions of mcSim and mdSim, enter:
\code
> make mcMd-mpi
\endcode
from the simpatico/ root directory.  This should create executable files 
named mcSim_m and mdSim_m in the simpatico/bin/ directory. The suffix "_m" 
on these executable names denotes "MPI", and is used to distinguish 
multi-processor versions of the mcSim and mdSim executables from 
single processor versions.
 
\section compile_configure_section The configure script

Each build directory (i.e., bld/serial, bld/parallel, and src/) contains 
a bash script named "configure" that can be used enabled or disable 
specific compile time features. There is also an analogous script in the
simpatico root directory which can be used to apply the same set of changes
simultaneously to configuration files in the bld/serial and bld/parallel
directories.

The configure script in each build directory does its work by editing the 
build configuration files, which control what options will be passed to 
the compiler during any subsequent compilation. The configure script in 
each build directory must be invoked from the directory that contains 
the script (i.e., from bld/serial, bld/parallel, and src/), and only 
affects the configuration of code that is compiled in that build directory.

The configure script in the root simpatico/ directory works by invoking
the configure scripts in the bld/parallel and bld/serial with the same
options, thus applying the same changes to both directories.

\subsection compile_configure_query_sub The "query" option

The -q command line option of a configure script may be used to query 
which optional features are currently set to be enabled or disabled, and
the current values of variables that specify the choice of compiler and
environment. To see how this works, after the setup script has been run, 
cd to the bld/serial directory and enter
\code
> ./configure -q
\endcode
The -q command line option cause the script to print a list of which 
optional features are currently enabled, and the name of the current 
choice of compiler. The resulting output for the default configuration 
should look something like this:
\code
-m  OFF - MPI
-g  OFF - debugging
-p  ON  - pair potential
-b  ON  - bond potential
-a  OFF - angle potential
-d  OFF - dihedral potential
-e  OFF - external potential
-s  OFF - special potential
-l  OFF - McMd links (mutable bonds)
-s  OFF - McMd shift
-u  OFF - DdMd modifiers
-k  ON  - automatic dependency tracking
COMPILER=gcc
OS=generic
\endcode

Each line of this output before the last two shows whether an optional 
feature is currently set to be enabled (ON) or disabled (OFF). Note 
that only the nonbonded pair potential and bond potential are enabled 
by default, and that the angle, dihedral and other potentials are
disabled by default. If you need to run a simulation that uses any 
of these other types of potential, you will need to use the configure
script to enable the relevant features before compiling.

The last two line of the query output give the value of a makefile
variable named COMPILER that is an identifier for the choice of 
compiler (gcc, by default), and an identifier OS for the environment 
(generic, by default). 

The output produced by running the configure script in the bld/parallel 
directory after setup looks similiar to that shown above, except that 
it should indicate that MPI is ON (enabled) by default in that 
directory.

Invoking the configure script from the simpatico/ root directory
with the -q option produces a output that first shows the current 
settings in both the bld/serial directory, which control the 
configuration of single-processor programs, and then the current
setting in the bld/parallel directory, which control the 
configuration of MPI programs.  If all changes have been applied
using the configure script in the root directory, the settings in
these two directories should be the same, except that MPI should 
be disabled in bld/serial and enabled in bld/parallel. 

\subsection compile_configure_change_sub Changing configuration

In the output produced by invoking "./configure -q" option, each 
line of the output before the last two begins with the name of the 
command line option for the configure script (a dash followed by 
a letter) that can be used to enable or disable an associated feature. 
For example, the "debugging" feature is enabled or disabled using the 
"-g" option. Each feature can be enabled by using the associated 
command line option followed by "1" (ON), or disabled by using the 
option followed by "0" (OFF).  

For example, to enable debugging (which enables extensive run-time sanity 
checks, at a slight cost in speed) in code built in one build directory, 
one would enter
\code 
> ./configure -g1
\endcode
either from the root of the relevant build directory or from the
simpatico/ root directory. Invoking this command from a build directory
enables debugging in that build directory, whereas invoking it from
the simpatico/ root directory enables debugging in both the bld/serial 
and bld/parallel directories, thus applying the change to all code
that compiled out of source. Running "./configure -q" again after 
this change would show that debugging is now enabled.  To disable 
debugging before compiling, one would instead enter
\code 
> ./configure -g0
\endcode
These and any other desired changes in compile-time configuration must 
be made before invoking make to compile a program.  

Several features may be enabled and/or disabled in a single command.
For example, to enable the use of angle and dihedral potentials, which 
are disabled by default, one would invoke
\code
> ./configure -a1 -d1
\endcode
either from a build directory or the simpatico root directory.

The -j option option of the configure script may be used to set the 
value of the COMPILER identifier string, which chooses a compiler. 
This option takes the desired value of the COMPILER identifier as
an argument. The only allowed options are "gcc" or "intel". The
-o option can be used to set the value of the OS identifier, which
is set to "generic" by default. 

Invoking the configure script with the -h ("help") option gives a
list of all command line options accepted by the configure command, 
along with some information about what C++ preprocessor macros are 
defined or undefined by specific commands.  All of the available 
optional features of the various simpatico programs are also 
discussed \ref user_options_page "elsewhere" in the web documentation.

The configure script in the simpatico/ root directory can be used to 
apply the same set of changes simultaneously to configuration files
in the bld/serial and bld/parallel directories. This version of the 
script should be invoked from the root directory. It accepts the same 
options as the configure scripts in the build directories, with one 
exception: It does not accept the "-m" option, which enables or 
disables MPI, because MPI should normally be enabled bld/parallel 
and disabled in bld/serial. The root directory configure script 
works by simply invoking the ./configure scripts in the bld/serial 
and bld/parallel directories. Changes made with this script do not 
effect the configuration of in-source builds. 

\section compile_doc_section Generating html documentation

The html documentation you are reading was generated using the <a href=http://www.doxygen.org> doxygen </a> documentation utility. Neither the git repository nor the downloadable version of the source code contain the resulting html files. If doxygen is installed on your machine, you can regenerate a local copy of the html documentation by entering
\code
> make html 
\endcode
from the root directory. The resulting html files will be installed in the simpatico/doc/html/ directory. 

The main page of the html documentation is a file named doc/html/index.html. To begin reading the documentation, open this file in any web browser, e.g., by entering 
\code
> firefox doc/html/index.html
\endcode
from the simpatico/ directory to use the firefox browser on linux, or entering
\code
> open doc/html/index.html
\endcode 
to use the default browser on a Mac.

The text of the page you are now reading, along with other main manual pages, is contained in a set of files with file extension *.dox in the doc/manual directory. These are written in plain text, and can also be read with any text editor. Additional API documentation for each C++ class is extracted by doxygen from documentation blocks in the class header file. 

To delete all html documentation from the doc/html directory, enter
\code
> make clean-html
\endcode
from the simpatico/ root directory.

\section compile_dependency_section Automatic dependency generation

By default, the simpatico build system automatically generates a "dependency" file, with a suffix *.d, whenever it compiles a *.cpp source file. The dependency file is placed in the build directory tree in same directory as the corresponding object *.o file. 

The system for generating dependency files uses the g++ compiler, which does the actual analysis of dependencies among C++ files, and a python script named simpatico/scripts/python/makeDepend.py. To function, the system requires that:
 
  - A g++ compiler (or a link with this name) must be in the user's PATH environment variable

  - A python interpreter must be in the user's PATH

  - The simpatico/scripts/python/ directory must be in the PYTHONPATH environment variable

Note that the g++ compiler is used for dependency analysis even if another compiler (e.g., the intel compiler) is used for compilation. A g++ compiler and python interpreter is normally available on any modern linux distribution and any Mac OS X environment that is correctly set up for C++ development.

Automatic generation of dependency files is an essential feature for developers - It makes it possible to safely rebuild a program after you modify one or two files, and have the build system recompile only what needs to be recompiled. This feature is not, however, strictly necessary for users who simply want to compile one version of the code and use it as is, without modifying any C++ files.  It is possible to disable automatic dependency generation in any build directory by entering "./configure -k0" from the root of that build directory. The only good reason to do so is as a temporary measure if you run into trouble that you suspect arises from a problem in the dependency generation system, e.g., if compilation fails because the operating system cannot find a python interpeter or if python cannot find the makeDepend.py python script. If the PATH and PYTHONPATH are set correctly, however, this should not be necessary.

<BR>
\ref user_source_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_usage_page (Next) 

*/
